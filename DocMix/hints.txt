

You can do routing just by checking the req.url like so:

const http = require("http");

const server = http.createServer(function (req, res) {
    res.writeHead(200, { "Content-Type": "text/html" });
    var url = req.url;
    if (url === "/foo") {
        res.write("<h1>foo<h1>");
        res.end();
    } else if (url === "/bar") {
        res.write("<h1>bar<h1>");
        res.end();
    } else {
        res.write("<h1>Home!<h1>");
        res.end();
    }
});

const PORT = process.env.PORT || 5000;
server.listen(PORT, () => {
    console.log(`Server has been started on ${PORT}...`);
});

Obviously that approach is a bit "naive" and it does not scale as your routes are growing. You can always use find-my-way though, a tiny, super-fast plugin working on top of plain http servers.

const http = require('http')
const router = require('find-my-way')()

router.on('GET', '/', (req, res, params) => {
  res.end('{"message":"hello world"}')
})

const server = http.createServer((req, res) => {
  router.lookup(req, res)
})

server.listen(3000, err => {
  if (err) throw err
  console.log('Server listening on: http://localhost:3000')
})

Share
Improve this answer
Follow
answered Mar 18, 2021 at 19:36
vorillaz's user avatar
vorillaz
6,22822 gold badges3030 silver badges4646 bronze badges

    There are 2 questions. 1) How to get the parameter passed to the server in find-my-way? Params is usually empty or undefined. 2) And in find-my-way only get-requests? – 
    Artemka
    Commented Mar 18, 2021 at 21:29 

1) Parameters are coming as parts of the req object, take a look at the docs. You can even create parametric URLs 2) You can have GET, POST, PUT etc listeners on the router – 
vorillaz
Commented Mar 18, 2021